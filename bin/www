#!/usr/bin/env node

/**
 * Module dependencies.
 */
process.env.DEBUG = 'app:* ';
global.mode = 'dev';

var app = require('../app');
var debug = require('debug')('app:server');
var http = require('http');
var setting = require('../config');

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}


module.exports = {
    start: (summersCompiler, callback) => {

        if (!summersCompiler) {
            debug('summersCompiler loaded fail... Will not be compile static file.');
        } else {
            debug('summersCompiler loaded success.');
            global.SummersCompiler = summersCompiler;
        }

        /**
         * Get port from environment and store in Express.
         */

        var port = normalizePort(setting.port || '3000');

        /**
         * Create HTTP server.
         */

        var server = http.createServer(app.callback());

        /**
         * Listen on provided port, on all network interfaces.
         */

        server.listen(port);
        server.on('error', (err)=> {
            onError(err);
            callback && callback();
        });
        server.on('listening', onListening);

        /**
         * Event listener for HTTP server "listening" event.
         */

        function onListening() {
            var addr = server.address();
            var bind = typeof addr === 'string'
                ? 'pipe ' + addr
                : 'port ' + addr.port;
            debug('Listening on ' + bind + ' http://localhost:9098');
            callback && callback();
        }

        /**
         * Event listener for HTTP server "error" event.
         */

        function onError(error) {
            if (error.syscall !== 'listen') {
                throw error;
            }

            var bind = typeof port === 'string'
                ? 'Pipe ' + port
                : 'Port ' + port;

            // handle specific listen errors with friendly messages
            switch (error.code) {
                case 'EACCES':
                    console.error(bind + ' requires elevated privileges');
                    process.exit(1);
                    break;
                case 'EADDRINUSE':
                    console.error(bind + ' is already in use');
                    process.exit(1);
                    break;
                default:
                    throw error;
            }
        }
    }
}