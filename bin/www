#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const { warn, error, info } = require('../src/logger');
const http = require('http');
const setting = require('../config');

let startHandle;

/**
 * Create HTTP server.
 */

let server;

/**
 * Get port from environment and store in Express.
 */

let localPort;

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(err) {
    if (err.syscall !== 'listen') {
        throw err;
    }

    let bind = typeof localPort === 'string'
        ? 'Pipe ' + localPort
        : 'Port ' + localPort;

    // handle specific listen errors with friendly messages
    switch (err.code) {
        case 'EACCES':
            error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw err;
    }
    startHandle && startHandle(err);
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
        info(`Listening on ${bind}.`);
    startHandle && startHandle();
}


module.exports = {
    start: (compilerOptions, callback) => {
        let {summersCompiler, port} = compilerOptions || {};
        if (!summersCompiler) {
            warn('summersCompiler loaded fail... Will not be compile static file.');
        } else {
            info('summersCompiler loaded success.');
        }

        startHandle = callback;

        localPort = normalizePort(port || setting(summersCompiler).port || '3000');

        /**
         * Create HTTP server.
         */

        server = http.createServer(app(summersCompiler).callback());

        /**
         * Listen on provided port, on all network interfaces.
         */

        server.listen(localPort);
        server.on('error', onError);
        server.on('listening', onListening);
    }
}